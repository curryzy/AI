/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerLevel as PrismaCustomerLevel,
  CustomerInfo as PrismaCustomerInfo,
} from "@prisma/client";

export class CustomerLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerLevel.count(args);
  }

  async customerLevels(
    args: Prisma.CustomerLevelFindManyArgs
  ): Promise<PrismaCustomerLevel[]> {
    return this.prisma.customerLevel.findMany(args);
  }
  async customerLevel(
    args: Prisma.CustomerLevelFindUniqueArgs
  ): Promise<PrismaCustomerLevel | null> {
    return this.prisma.customerLevel.findUnique(args);
  }
  async createCustomerLevel(
    args: Prisma.CustomerLevelCreateArgs
  ): Promise<PrismaCustomerLevel> {
    return this.prisma.customerLevel.create(args);
  }
  async updateCustomerLevel(
    args: Prisma.CustomerLevelUpdateArgs
  ): Promise<PrismaCustomerLevel> {
    return this.prisma.customerLevel.update(args);
  }
  async deleteCustomerLevel(
    args: Prisma.CustomerLevelDeleteArgs
  ): Promise<PrismaCustomerLevel> {
    return this.prisma.customerLevel.delete(args);
  }

  async findCustomerInfos(
    parentId: string,
    args: Prisma.CustomerInfoFindManyArgs
  ): Promise<PrismaCustomerInfo[]> {
    return this.prisma.customerLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customerInfos(args);
  }
}
