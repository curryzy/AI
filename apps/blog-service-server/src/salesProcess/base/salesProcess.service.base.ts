/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SalesProcess as PrismaSalesProcess } from "@prisma/client";

export class SalesProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalesProcessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesProcess.count(args);
  }

  async salesProcesses(
    args: Prisma.SalesProcessFindManyArgs
  ): Promise<PrismaSalesProcess[]> {
    return this.prisma.salesProcess.findMany(args);
  }
  async salesProcess(
    args: Prisma.SalesProcessFindUniqueArgs
  ): Promise<PrismaSalesProcess | null> {
    return this.prisma.salesProcess.findUnique(args);
  }
  async createSalesProcess(
    args: Prisma.SalesProcessCreateArgs
  ): Promise<PrismaSalesProcess> {
    return this.prisma.salesProcess.create(args);
  }
  async updateSalesProcess(
    args: Prisma.SalesProcessUpdateArgs
  ): Promise<PrismaSalesProcess> {
    return this.prisma.salesProcess.update(args);
  }
  async deleteSalesProcess(
    args: Prisma.SalesProcessDeleteArgs
  ): Promise<PrismaSalesProcess> {
    return this.prisma.salesProcess.delete(args);
  }
}
