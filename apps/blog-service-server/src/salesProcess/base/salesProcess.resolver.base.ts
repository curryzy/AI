/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalesProcess } from "./SalesProcess";
import { SalesProcessCountArgs } from "./SalesProcessCountArgs";
import { SalesProcessFindManyArgs } from "./SalesProcessFindManyArgs";
import { SalesProcessFindUniqueArgs } from "./SalesProcessFindUniqueArgs";
import { CreateSalesProcessArgs } from "./CreateSalesProcessArgs";
import { UpdateSalesProcessArgs } from "./UpdateSalesProcessArgs";
import { DeleteSalesProcessArgs } from "./DeleteSalesProcessArgs";
import { SalesProcessService } from "../salesProcess.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalesProcess)
export class SalesProcessResolverBase {
  constructor(
    protected readonly service: SalesProcessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "read",
    possession: "any",
  })
  async _salesProcessesMeta(
    @graphql.Args() args: SalesProcessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalesProcess])
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "read",
    possession: "any",
  })
  async salesProcesses(
    @graphql.Args() args: SalesProcessFindManyArgs
  ): Promise<SalesProcess[]> {
    return this.service.salesProcesses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalesProcess, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "read",
    possession: "own",
  })
  async salesProcess(
    @graphql.Args() args: SalesProcessFindUniqueArgs
  ): Promise<SalesProcess | null> {
    const result = await this.service.salesProcess(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalesProcess)
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "create",
    possession: "any",
  })
  async createSalesProcess(
    @graphql.Args() args: CreateSalesProcessArgs
  ): Promise<SalesProcess> {
    return await this.service.createSalesProcess({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalesProcess)
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "update",
    possession: "any",
  })
  async updateSalesProcess(
    @graphql.Args() args: UpdateSalesProcessArgs
  ): Promise<SalesProcess | null> {
    try {
      return await this.service.updateSalesProcess({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesProcess)
  @nestAccessControl.UseRoles({
    resource: "SalesProcess",
    action: "delete",
    possession: "any",
  })
  async deleteSalesProcess(
    @graphql.Args() args: DeleteSalesProcessArgs
  ): Promise<SalesProcess | null> {
    try {
      return await this.service.deleteSalesProcess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
