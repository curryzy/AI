/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerInfo } from "./CustomerInfo";
import { CustomerInfoCountArgs } from "./CustomerInfoCountArgs";
import { CustomerInfoFindManyArgs } from "./CustomerInfoFindManyArgs";
import { CustomerInfoFindUniqueArgs } from "./CustomerInfoFindUniqueArgs";
import { CreateCustomerInfoArgs } from "./CreateCustomerInfoArgs";
import { UpdateCustomerInfoArgs } from "./UpdateCustomerInfoArgs";
import { DeleteCustomerInfoArgs } from "./DeleteCustomerInfoArgs";
import { CustomerLevel } from "../../customerLevel/base/CustomerLevel";
import { CustomerInfoService } from "../customerInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerInfo)
export class CustomerInfoResolverBase {
  constructor(
    protected readonly service: CustomerInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "read",
    possession: "any",
  })
  async _customerInfosMeta(
    @graphql.Args() args: CustomerInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerInfo])
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "read",
    possession: "any",
  })
  async customerInfos(
    @graphql.Args() args: CustomerInfoFindManyArgs
  ): Promise<CustomerInfo[]> {
    return this.service.customerInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "read",
    possession: "own",
  })
  async customerInfo(
    @graphql.Args() args: CustomerInfoFindUniqueArgs
  ): Promise<CustomerInfo | null> {
    const result = await this.service.customerInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerInfo)
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "create",
    possession: "any",
  })
  async createCustomerInfo(
    @graphql.Args() args: CreateCustomerInfoArgs
  ): Promise<CustomerInfo> {
    return await this.service.createCustomerInfo({
      ...args,
      data: {
        ...args.data,

        customerLevel: args.data.customerLevel
          ? {
              connect: args.data.customerLevel,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerInfo)
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "update",
    possession: "any",
  })
  async updateCustomerInfo(
    @graphql.Args() args: UpdateCustomerInfoArgs
  ): Promise<CustomerInfo | null> {
    try {
      return await this.service.updateCustomerInfo({
        ...args,
        data: {
          ...args.data,

          customerLevel: args.data.customerLevel
            ? {
                connect: args.data.customerLevel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerInfo)
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerInfo(
    @graphql.Args() args: DeleteCustomerInfoArgs
  ): Promise<CustomerInfo | null> {
    try {
      return await this.service.deleteCustomerInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerLevel, {
    nullable: true,
    name: "customerLevel",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "any",
  })
  async getCustomerLevel(
    @graphql.Parent() parent: CustomerInfo
  ): Promise<CustomerLevel | null> {
    const result = await this.service.getCustomerLevel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
