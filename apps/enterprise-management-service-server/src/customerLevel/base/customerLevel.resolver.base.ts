/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerLevel } from "./CustomerLevel";
import { CustomerLevelCountArgs } from "./CustomerLevelCountArgs";
import { CustomerLevelFindManyArgs } from "./CustomerLevelFindManyArgs";
import { CustomerLevelFindUniqueArgs } from "./CustomerLevelFindUniqueArgs";
import { CreateCustomerLevelArgs } from "./CreateCustomerLevelArgs";
import { UpdateCustomerLevelArgs } from "./UpdateCustomerLevelArgs";
import { DeleteCustomerLevelArgs } from "./DeleteCustomerLevelArgs";
import { CustomerInfoFindManyArgs } from "../../customerInfo/base/CustomerInfoFindManyArgs";
import { CustomerInfo } from "../../customerInfo/base/CustomerInfo";
import { CustomerLevelService } from "../customerLevel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerLevel)
export class CustomerLevelResolverBase {
  constructor(
    protected readonly service: CustomerLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "any",
  })
  async _customerLevelsMeta(
    @graphql.Args() args: CustomerLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerLevel])
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "any",
  })
  async customerLevels(
    @graphql.Args() args: CustomerLevelFindManyArgs
  ): Promise<CustomerLevel[]> {
    return this.service.customerLevels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerLevel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "own",
  })
  async customerLevel(
    @graphql.Args() args: CustomerLevelFindUniqueArgs
  ): Promise<CustomerLevel | null> {
    const result = await this.service.customerLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerLevel)
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "create",
    possession: "any",
  })
  async createCustomerLevel(
    @graphql.Args() args: CreateCustomerLevelArgs
  ): Promise<CustomerLevel> {
    return await this.service.createCustomerLevel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerLevel)
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "update",
    possession: "any",
  })
  async updateCustomerLevel(
    @graphql.Args() args: UpdateCustomerLevelArgs
  ): Promise<CustomerLevel | null> {
    try {
      return await this.service.updateCustomerLevel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerLevel)
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerLevel(
    @graphql.Args() args: DeleteCustomerLevelArgs
  ): Promise<CustomerLevel | null> {
    try {
      return await this.service.deleteCustomerLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerInfo], { name: "customerInfos" })
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "read",
    possession: "any",
  })
  async findCustomerInfos(
    @graphql.Parent() parent: CustomerLevel,
    @graphql.Args() args: CustomerInfoFindManyArgs
  ): Promise<CustomerInfo[]> {
    const results = await this.service.findCustomerInfos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
