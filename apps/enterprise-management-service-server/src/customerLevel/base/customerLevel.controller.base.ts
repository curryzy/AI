/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomerLevelService } from "../customerLevel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomerLevelCreateInput } from "./CustomerLevelCreateInput";
import { CustomerLevel } from "./CustomerLevel";
import { CustomerLevelFindManyArgs } from "./CustomerLevelFindManyArgs";
import { CustomerLevelWhereUniqueInput } from "./CustomerLevelWhereUniqueInput";
import { CustomerLevelUpdateInput } from "./CustomerLevelUpdateInput";
import { CustomerInfoFindManyArgs } from "../../customerInfo/base/CustomerInfoFindManyArgs";
import { CustomerInfo } from "../../customerInfo/base/CustomerInfo";
import { CustomerInfoWhereUniqueInput } from "../../customerInfo/base/CustomerInfoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomerLevelControllerBase {
  constructor(
    protected readonly service: CustomerLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerLevel })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomerLevel(
    @common.Body() data: CustomerLevelCreateInput
  ): Promise<CustomerLevel> {
    return await this.service.createCustomerLevel({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        level: true,
        potentialValue: true,
        transactionHistory: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerLevel] })
  @ApiNestedQuery(CustomerLevelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customerLevels(
    @common.Req() request: Request
  ): Promise<CustomerLevel[]> {
    const args = plainToClass(CustomerLevelFindManyArgs, request.query);
    return this.service.customerLevels({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        level: true,
        potentialValue: true,
        transactionHistory: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customerLevel(
    @common.Param() params: CustomerLevelWhereUniqueInput
  ): Promise<CustomerLevel | null> {
    const result = await this.service.customerLevel({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        level: true,
        potentialValue: true,
        transactionHistory: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomerLevel(
    @common.Param() params: CustomerLevelWhereUniqueInput,
    @common.Body() data: CustomerLevelUpdateInput
  ): Promise<CustomerLevel | null> {
    try {
      return await this.service.updateCustomerLevel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          level: true,
          potentialValue: true,
          transactionHistory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomerLevel(
    @common.Param() params: CustomerLevelWhereUniqueInput
  ): Promise<CustomerLevel | null> {
    try {
      return await this.service.deleteCustomerLevel({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          level: true,
          potentialValue: true,
          transactionHistory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerInfos")
  @ApiNestedQuery(CustomerInfoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerInfo",
    action: "read",
    possession: "any",
  })
  async findCustomerInfos(
    @common.Req() request: Request,
    @common.Param() params: CustomerLevelWhereUniqueInput
  ): Promise<CustomerInfo[]> {
    const query = plainToClass(CustomerInfoFindManyArgs, request.query);
    const results = await this.service.findCustomerInfos(params.id, {
      ...query,
      select: {
        address: true,
        communicationContent: true,
        companyInfo: true,
        contactInfo: true,
        createdAt: true,

        customerLevel: {
          select: {
            id: true,
          },
        },

        followUpLogs: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerInfos")
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "update",
    possession: "any",
  })
  async connectCustomerInfos(
    @common.Param() params: CustomerLevelWhereUniqueInput,
    @common.Body() body: CustomerInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerInfos: {
        connect: body,
      },
    };
    await this.service.updateCustomerLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerInfos")
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "update",
    possession: "any",
  })
  async updateCustomerInfos(
    @common.Param() params: CustomerLevelWhereUniqueInput,
    @common.Body() body: CustomerInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerInfos: {
        set: body,
      },
    };
    await this.service.updateCustomerLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerInfos")
  @nestAccessControl.UseRoles({
    resource: "CustomerLevel",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerInfos(
    @common.Param() params: CustomerLevelWhereUniqueInput,
    @common.Body() body: CustomerInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerInfos: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerLevel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
