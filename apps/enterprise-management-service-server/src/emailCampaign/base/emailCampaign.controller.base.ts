/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmailCampaignService } from "../emailCampaign.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmailCampaignCreateInput } from "./EmailCampaignCreateInput";
import { EmailCampaign } from "./EmailCampaign";
import { EmailCampaignFindManyArgs } from "./EmailCampaignFindManyArgs";
import { EmailCampaignWhereUniqueInput } from "./EmailCampaignWhereUniqueInput";
import { EmailCampaignUpdateInput } from "./EmailCampaignUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmailCampaignControllerBase {
  constructor(
    protected readonly service: EmailCampaignService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailCampaign })
  @nestAccessControl.UseRoles({
    resource: "EmailCampaign",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmailCampaign(
    @common.Body() data: EmailCampaignCreateInput
  ): Promise<EmailCampaign> {
    return await this.service.createEmailCampaign({
      data: data,
      select: {
        campaignDetails: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailCampaign] })
  @ApiNestedQuery(EmailCampaignFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmailCampaign",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async emailCampaigns(
    @common.Req() request: Request
  ): Promise<EmailCampaign[]> {
    const args = plainToClass(EmailCampaignFindManyArgs, request.query);
    return this.service.emailCampaigns({
      ...args,
      select: {
        campaignDetails: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailCampaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmailCampaign",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async emailCampaign(
    @common.Param() params: EmailCampaignWhereUniqueInput
  ): Promise<EmailCampaign | null> {
    const result = await this.service.emailCampaign({
      where: params,
      select: {
        campaignDetails: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailCampaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmailCampaign",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmailCampaign(
    @common.Param() params: EmailCampaignWhereUniqueInput,
    @common.Body() data: EmailCampaignUpdateInput
  ): Promise<EmailCampaign | null> {
    try {
      return await this.service.updateEmailCampaign({
        where: params,
        data: data,
        select: {
          campaignDetails: true,
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailCampaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmailCampaign",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmailCampaign(
    @common.Param() params: EmailCampaignWhereUniqueInput
  ): Promise<EmailCampaign | null> {
    try {
      return await this.service.deleteEmailCampaign({
        where: params,
        select: {
          campaignDetails: true,
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
