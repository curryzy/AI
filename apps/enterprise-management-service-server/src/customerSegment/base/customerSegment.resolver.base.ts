/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerSegment } from "./CustomerSegment";
import { CustomerSegmentCountArgs } from "./CustomerSegmentCountArgs";
import { CustomerSegmentFindManyArgs } from "./CustomerSegmentFindManyArgs";
import { CustomerSegmentFindUniqueArgs } from "./CustomerSegmentFindUniqueArgs";
import { CreateCustomerSegmentArgs } from "./CreateCustomerSegmentArgs";
import { UpdateCustomerSegmentArgs } from "./UpdateCustomerSegmentArgs";
import { DeleteCustomerSegmentArgs } from "./DeleteCustomerSegmentArgs";
import { CustomerSegmentService } from "../customerSegment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerSegment)
export class CustomerSegmentResolverBase {
  constructor(
    protected readonly service: CustomerSegmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "read",
    possession: "any",
  })
  async _customerSegmentsMeta(
    @graphql.Args() args: CustomerSegmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerSegment])
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "read",
    possession: "any",
  })
  async customerSegments(
    @graphql.Args() args: CustomerSegmentFindManyArgs
  ): Promise<CustomerSegment[]> {
    return this.service.customerSegments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerSegment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "read",
    possession: "own",
  })
  async customerSegment(
    @graphql.Args() args: CustomerSegmentFindUniqueArgs
  ): Promise<CustomerSegment | null> {
    const result = await this.service.customerSegment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSegment)
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "create",
    possession: "any",
  })
  async createCustomerSegment(
    @graphql.Args() args: CreateCustomerSegmentArgs
  ): Promise<CustomerSegment> {
    return await this.service.createCustomerSegment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSegment)
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "update",
    possession: "any",
  })
  async updateCustomerSegment(
    @graphql.Args() args: UpdateCustomerSegmentArgs
  ): Promise<CustomerSegment | null> {
    try {
      return await this.service.updateCustomerSegment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerSegment)
  @nestAccessControl.UseRoles({
    resource: "CustomerSegment",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerSegment(
    @graphql.Args() args: DeleteCustomerSegmentArgs
  ): Promise<CustomerSegment | null> {
    try {
      return await this.service.deleteCustomerSegment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
