/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerSegment as PrismaCustomerSegment,
} from "@prisma/client";

export class CustomerSegmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerSegmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerSegment.count(args);
  }

  async customerSegments(
    args: Prisma.CustomerSegmentFindManyArgs
  ): Promise<PrismaCustomerSegment[]> {
    return this.prisma.customerSegment.findMany(args);
  }
  async customerSegment(
    args: Prisma.CustomerSegmentFindUniqueArgs
  ): Promise<PrismaCustomerSegment | null> {
    return this.prisma.customerSegment.findUnique(args);
  }
  async createCustomerSegment(
    args: Prisma.CustomerSegmentCreateArgs
  ): Promise<PrismaCustomerSegment> {
    return this.prisma.customerSegment.create(args);
  }
  async updateCustomerSegment(
    args: Prisma.CustomerSegmentUpdateArgs
  ): Promise<PrismaCustomerSegment> {
    return this.prisma.customerSegment.update(args);
  }
  async deleteCustomerSegment(
    args: Prisma.CustomerSegmentDeleteArgs
  ): Promise<PrismaCustomerSegment> {
    return this.prisma.customerSegment.delete(args);
  }
}
