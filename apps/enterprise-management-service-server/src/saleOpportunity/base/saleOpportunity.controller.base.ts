/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SaleOpportunityService } from "../saleOpportunity.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SaleOpportunityCreateInput } from "./SaleOpportunityCreateInput";
import { SaleOpportunity } from "./SaleOpportunity";
import { SaleOpportunityFindManyArgs } from "./SaleOpportunityFindManyArgs";
import { SaleOpportunityWhereUniqueInput } from "./SaleOpportunityWhereUniqueInput";
import { SaleOpportunityUpdateInput } from "./SaleOpportunityUpdateInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SaleOpportunityControllerBase {
  constructor(
    protected readonly service: SaleOpportunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SaleOpportunity })
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSaleOpportunity(
    @common.Body() data: SaleOpportunityCreateInput
  ): Promise<SaleOpportunity> {
    return await this.service.createSaleOpportunity({
      data: {
        ...data,

        lead: data.lead
          ? {
              connect: data.lead,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        customer: true,
        id: true,

        lead: {
          select: {
            id: true,
          },
        },

        progress: true,
        revenueForecast: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SaleOpportunity] })
  @ApiNestedQuery(SaleOpportunityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleOpportunities(
    @common.Req() request: Request
  ): Promise<SaleOpportunity[]> {
    const args = plainToClass(SaleOpportunityFindManyArgs, request.query);
    return this.service.saleOpportunities({
      ...args,
      select: {
        createdAt: true,
        customer: true,
        id: true,

        lead: {
          select: {
            id: true,
          },
        },

        progress: true,
        revenueForecast: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SaleOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleOpportunity(
    @common.Param() params: SaleOpportunityWhereUniqueInput
  ): Promise<SaleOpportunity | null> {
    const result = await this.service.saleOpportunity({
      where: params,
      select: {
        createdAt: true,
        customer: true,
        id: true,

        lead: {
          select: {
            id: true,
          },
        },

        progress: true,
        revenueForecast: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SaleOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSaleOpportunity(
    @common.Param() params: SaleOpportunityWhereUniqueInput,
    @common.Body() data: SaleOpportunityUpdateInput
  ): Promise<SaleOpportunity | null> {
    try {
      return await this.service.updateSaleOpportunity({
        where: params,
        data: {
          ...data,

          lead: data.lead
            ? {
                connect: data.lead,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          customer: true,
          id: true,

          lead: {
            select: {
              id: true,
            },
          },

          progress: true,
          revenueForecast: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SaleOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSaleOpportunity(
    @common.Param() params: SaleOpportunityWhereUniqueInput
  ): Promise<SaleOpportunity | null> {
    try {
      return await this.service.deleteSaleOpportunity({
        where: params,
        select: {
          createdAt: true,
          customer: true,
          id: true,

          lead: {
            select: {
              id: true,
            },
          },

          progress: true,
          revenueForecast: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: SaleOpportunityWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        contractDetails: true,
        createdAt: true,
        customer: true,
        id: true,

        saleOpportunity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validityPeriod: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: SaleOpportunityWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateSaleOpportunity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: SaleOpportunityWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateSaleOpportunity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: SaleOpportunityWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateSaleOpportunity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
