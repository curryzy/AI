/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleOpportunity } from "./SaleOpportunity";
import { SaleOpportunityCountArgs } from "./SaleOpportunityCountArgs";
import { SaleOpportunityFindManyArgs } from "./SaleOpportunityFindManyArgs";
import { SaleOpportunityFindUniqueArgs } from "./SaleOpportunityFindUniqueArgs";
import { CreateSaleOpportunityArgs } from "./CreateSaleOpportunityArgs";
import { UpdateSaleOpportunityArgs } from "./UpdateSaleOpportunityArgs";
import { DeleteSaleOpportunityArgs } from "./DeleteSaleOpportunityArgs";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { Lead } from "../../lead/base/Lead";
import { SaleOpportunityService } from "../saleOpportunity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleOpportunity)
export class SaleOpportunityResolverBase {
  constructor(
    protected readonly service: SaleOpportunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "read",
    possession: "any",
  })
  async _saleOpportunitiesMeta(
    @graphql.Args() args: SaleOpportunityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleOpportunity])
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "read",
    possession: "any",
  })
  async saleOpportunities(
    @graphql.Args() args: SaleOpportunityFindManyArgs
  ): Promise<SaleOpportunity[]> {
    return this.service.saleOpportunities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleOpportunity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "read",
    possession: "own",
  })
  async saleOpportunity(
    @graphql.Args() args: SaleOpportunityFindUniqueArgs
  ): Promise<SaleOpportunity | null> {
    const result = await this.service.saleOpportunity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleOpportunity)
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "create",
    possession: "any",
  })
  async createSaleOpportunity(
    @graphql.Args() args: CreateSaleOpportunityArgs
  ): Promise<SaleOpportunity> {
    return await this.service.createSaleOpportunity({
      ...args,
      data: {
        ...args.data,

        lead: args.data.lead
          ? {
              connect: args.data.lead,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleOpportunity)
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "update",
    possession: "any",
  })
  async updateSaleOpportunity(
    @graphql.Args() args: UpdateSaleOpportunityArgs
  ): Promise<SaleOpportunity | null> {
    try {
      return await this.service.updateSaleOpportunity({
        ...args,
        data: {
          ...args.data,

          lead: args.data.lead
            ? {
                connect: args.data.lead,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleOpportunity)
  @nestAccessControl.UseRoles({
    resource: "SaleOpportunity",
    action: "delete",
    possession: "any",
  })
  async deleteSaleOpportunity(
    @graphql.Args() args: DeleteSaleOpportunityArgs
  ): Promise<SaleOpportunity | null> {
    try {
      return await this.service.deleteSaleOpportunity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contract], { name: "contracts" })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @graphql.Parent() parent: SaleOpportunity,
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<Contract[]> {
    const results = await this.service.findContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Lead, {
    nullable: true,
    name: "lead",
  })
  @nestAccessControl.UseRoles({
    resource: "Lead",
    action: "read",
    possession: "any",
  })
  async getLead(
    @graphql.Parent() parent: SaleOpportunity
  ): Promise<Lead | null> {
    const result = await this.service.getLead(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
