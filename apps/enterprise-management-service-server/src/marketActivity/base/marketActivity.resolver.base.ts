/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MarketActivity } from "./MarketActivity";
import { MarketActivityCountArgs } from "./MarketActivityCountArgs";
import { MarketActivityFindManyArgs } from "./MarketActivityFindManyArgs";
import { MarketActivityFindUniqueArgs } from "./MarketActivityFindUniqueArgs";
import { CreateMarketActivityArgs } from "./CreateMarketActivityArgs";
import { UpdateMarketActivityArgs } from "./UpdateMarketActivityArgs";
import { DeleteMarketActivityArgs } from "./DeleteMarketActivityArgs";
import { MarketActivityService } from "../marketActivity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MarketActivity)
export class MarketActivityResolverBase {
  constructor(
    protected readonly service: MarketActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "read",
    possession: "any",
  })
  async _marketActivitiesMeta(
    @graphql.Args() args: MarketActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MarketActivity])
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "read",
    possession: "any",
  })
  async marketActivities(
    @graphql.Args() args: MarketActivityFindManyArgs
  ): Promise<MarketActivity[]> {
    return this.service.marketActivities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MarketActivity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "read",
    possession: "own",
  })
  async marketActivity(
    @graphql.Args() args: MarketActivityFindUniqueArgs
  ): Promise<MarketActivity | null> {
    const result = await this.service.marketActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MarketActivity)
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "create",
    possession: "any",
  })
  async createMarketActivity(
    @graphql.Args() args: CreateMarketActivityArgs
  ): Promise<MarketActivity> {
    return await this.service.createMarketActivity({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MarketActivity)
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "update",
    possession: "any",
  })
  async updateMarketActivity(
    @graphql.Args() args: UpdateMarketActivityArgs
  ): Promise<MarketActivity | null> {
    try {
      return await this.service.updateMarketActivity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketActivity)
  @nestAccessControl.UseRoles({
    resource: "MarketActivity",
    action: "delete",
    possession: "any",
  })
  async deleteMarketActivity(
    @graphql.Args() args: DeleteMarketActivityArgs
  ): Promise<MarketActivity | null> {
    try {
      return await this.service.deleteMarketActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
